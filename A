Dtos er vitore   

AddressDto
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;

namespace MauiApp1.Dtos
{
    public class AddressDto:INotifyPropertyChanged
    {
        private string city;
        private string street;


        public event PropertyChangedEventHandler? PropertyChanged;
        public void NPC([CallerMemberName] string propName = "")
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propName));
        }

        public string City { get => city; set { city = value;NPC(); } }
        public string Street { get => street; set { street = value;NPC(); } }


    }
}
Base64Converter
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MauiApp1.Dtos
{
    public class Base64Converter : IValueConverter
    {
        public object? Convert(object? value, Type targetType, object? parameter, CultureInfo culture)
        {
            if (value is string bace64image) 
            {
                byte[] data =System.Convert.FromBase64String(bace64image);
                return ImageSource.FromStream(() => new System.IO.MemoryStream(data));
            }
            return null;
        }

        public object? ConvertBack(object? value, Type targetType, object? parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }
}
StudentDto
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;

namespace MauiApp1.Dtos
{
    public class StudentDto:INotifyPropertyChanged
    {
        private int id;
        private string name;
        private DateTime admissionDate;
        private bool isActive;
        private string? imageUrl;
        private string addressJson;
        private string baseImage64;
        private List<AddressDto> addresses = new List<AddressDto>() { new AddressDto() };

        public event PropertyChangedEventHandler? PropertyChanged;
        public void NPC([CallerMemberName] string propName = "") 
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propName));
        }
        public int Id { get => id; set { id = value;NPC(); } }
        public string Name { get => name; set { name = value;NPC(); } }
        public DateTime AdmissionDate { get => admissionDate; set { admissionDate = value;NPC(); } }
        public bool IsActive { get => isActive; set { isActive = value;NPC(); } }
        public string? ImageUrl { get => imageUrl; set { imageUrl = value;NPC(); } }
        public string AddressJson { get => addressJson; set { addressJson = value;NPC(); } }
        public string BaseImage64 { get => baseImage64; set { baseImage64 = value;NPC(); } }
        public List<AddressDto> Addresses { get => addresses; set { addresses = value;NPC(); } }

    }

}
Android - resources -xml 

network_security_config
<?xml version="1.0" encoding="utf-8" ?>
<network-security-config>
	<domain-config clertextTrafficPermitted="true">
		<domain includeSubdomains="true">
		10.0.2.2
		</domain>
	</domain-config>
</network-security-config>


AppShell 
<?xml version="1.0" encoding="UTF-8" ?>
<Shell
    x:Class="MauiApp1.AppShell"
    xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
    xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
    xmlns:local="clr-namespace:MauiApp1"
    Shell.FlyoutBehavior="Flyout"
    FlyoutBackgroundColor="Coral"
    Title="Maui App">

    <ShellContent
        Title="Home"
        ContentTemplate="{DataTemplate local:MainPage}"
        Route="MainPage" />

    <ShellContent
        Title="AddStudentPage"
        ContentTemplate="{DataTemplate local:AddStudentPage}"
        Route="AddStudentPage" />

    <ShellContent
        Title="StidentListPage"
        ContentTemplate="{DataTemplate local:StidentListPage}"
        Route="StidentListPage" />

</Shell>

appsettings
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*",
  "ConnectionStrings": { "con": "Server=(localdb)\\ProjectModels; Database=MaUi_DB_2; Trusted_connection=true;" }
}






